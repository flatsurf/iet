=====================
intervalxt Change Log
=====================

.. current developments

v3.0.1
====================

**Fixed:**

* commit links in ASV reports
* Report coverage changes on Pull Requests
* Do not build conda package against broken fmt-7.1.0



v3.0.0
====================

**Changed:**

* A `DynamicalDecomposition` can now be copied (sharing a reference to the same underlying data.)

* Simplified `noexcept` qualifications on all methods in the public API.

**Removed:**

* Public `HalfEdge` constructor. Half edges should always be created by extracting them from a component's contour.

**Fixed:**

* Fixed two memory leaks in decomposition due to circular sequences of shared
  pointers. And refactored the internal data structures quite heavily.



v2.1.1
====================

**Fixed:**

* `Component::iet()` returned a `unique_ptr`; there's no need for that since
  `IntervalExchangeTransformation` can be moved (and easily copied if needed.)
  So we now return an IntervalExchangeTransformation instead. (technically, a
  breaking API & ABI change but nobody is using this functionality that we
  released a few minutes ago yet.)



v2.1.0
====================

**Added:**

* Component::iet() to be able to debug problems in Lengths implementations by
  working on a stripped down copy of the Interval Exchange Transformation
  underlying a component



v2.0.2
====================

**Fixed:**

* hang in `Component::decompositionStep`, should fix https://github.com/flatsurf/flatsurf/issues/136



v2.0.1
====================

**Fixed:**

* `sample::Coefficients` for exact real types; also added (trivial) tests for coefficients

* libintervalxt is not linked against e-antic and exact-real anymore. Instead, the tests are only run when these libraries are present.



v2.0.0
====================

**Added:**

* IntervalExchangeTransformation::equivalent() method to decide whether two
  interval exchange transformations are equivalent modulo the precise labeling.
* The `Lengths` of an `IntervalExchangeTransformation` are not available as
  `iet.lengths` in Python. This is probably limited to interval exchange
  transformations originally created through the Python interface.

**Changed:**

* Split `::intervalxt::sample::Arithmetic` into
  `::intervalxt::sample::FloorDivision` and
  `::intervalxt::sample::Coefficients`. The latter now accepts a vector of
  elements and produces a vector of Q-vectors that correspond to the given
  elements after being brought into the same vector space. This is a breaking
  API change.

* The method `Lengths::coefficients()` now expects a vector of labels and
  produces a vector of Q-vectors corresponding to realizations of the
  corresponding lengths in a common Q vector space.

* The method `IntervalExchangeTransformation::safInvariant()` now returns a
  `vector<mpq_class>` instead of a `valarray<mpq_class>`. The valarray had
  always been a source of issues since it does not play nicely with vectors
  that we use everywhere else in the flatsurf stack.
* In the Python interface, `IET` has been renamed to
  `IntervalExchangeTransformation` and `makeLengths` to `Lengths`.

* `sample::Lengths` over integer types now require `gmpxxll` to be available.

**Fixed:**

* Most labels now print nicely in the Python interface.
* negative lengths are now detected in the Python interface and reported as an error, #85



v1.0.3
====================

**Added:**

* safety checks for rever deploy script

**Changed:**

* upgraded clang-format to clang version 10



v1.0.2
====================

**Changed:**

* release with rever


