# See https://github.com/conda/conda-build/issues/2666 for the missing tag
{% set version = environ.get('GIT_DESCRIBE_TAG', 'untagged')|string|replace('-','_') %}
# conda-smithy assumes that the build number is >= 1000 when building with the new anaconda compilers,
# this probably is not important but make_build_number otherwise complains during the build
{% set build_number = (environ.get('GIT_DESCRIBE_NUMBER')|int + 1000)|string %}
{% set build_string = "master_" + ((build_flavour + "_") if build_flavour != "release" else "") + build_number %}

package:
  name: intervalxt
  version: {{ version }}

source:
  git_url: {{ environ.get('FEEDSTOCK_ROOT', '..') }}

build:
  number: {{ build_number }}
  string: {{ build_string }}
  # e-antic is not available on Windows yet
  skip: True  # [win]
  # e-antic is not available on macOS yet
  skip: True  # [osx]

requirements:
  build:
    - libtool
    - automake
    - {{ compiler('cxx') }}
    # requirements for ASV benchmarks
    - git
    # requirements for clang-format
    - clangdev ==8.0.0
  host:
    # compile time dependencies of libintervalxt
    - boost-cpp
    - e-antic 1.*
    - gmp
    - ppl
    # We pin to an explicit version of Python here; since the Python part is
    # noarch:python, the version does not matter. However, we need the same
    # version when doing "make install" so that files go into the site-packages
    # directory that was determined by ./configure.
    - python ==3.7
    # enable test/pyintervalxt tests in ./configure
    - pytest
    - cppyy
    # enable test/libintervalxt tests in ./configure
    - gtest
    - benchmark
    # enable check-valgrind in ./configure
    - valgrind
    # requirements for ASV benchmarks
    - asv

outputs:
  - name: libintervalxt
    script: install-libintervalxt.sh
    build:
      number: {{ build_number }}
      string: {{ build_string }}
{%- if build_flavour and build_flavour != 'release' %}
      features:
        - {{ build_flavour }}
{% endif %}
    requirements:
      build:
        - {{ compiler('cxx') }}
      host:
        - boost-cpp
        - e-antic 1.*
        - gmp
        - ppl
      run:
        # https://github.com/conda-forge/ppl-feedstock/issues/4
        - ppl
    run_exports:
      # We pin the version of libintervalxt exactly since we do not want to
      # bother with incompatibilities in our nightly builds.
      - libintervalxt {{ version }}
  - name: pyintervalxt
    build:
      number: {{ build_number }}
      string: {{ build_string }}
{%- if build_flavour and build_flavour != 'release' %}
      features:
        - {{ build_flavour }}
{% endif %}
      noarch: python
    script: install-pyintervalxt.sh
    requirements:
      host:
        - python ==3.7
        - setuptools
      run:
        # We pin the version of libintervalxt exactly since we do not want to
        # bother with incompatibilities in our nightly builds.
        - {{ pin_subpackage('libintervalxt', exact=True) }}
        - cppyy
        - pyeantic
        - python
        - boost-cpp
{%- if build_flavour == 'release' %}
    test:
      imports:
        - pyintervalxt
{% endif %}

about:
  home: https://github.com/flatsurf/intervalxt
  license: GPL3
  license_file: COPYING
  summary: Boshernitzan Algorithm with Interval Exchange Transformations

extra:
  recipe-maintainers:
    - saraedum
    - videlec
