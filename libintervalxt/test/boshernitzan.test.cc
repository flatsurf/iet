/**********************************************************************
 *  This file is part of intervalxt.
 *
 *        Copyright (C) 2019 Vincent Delecroix
 *        Copyright (C) 2019 Julian RÃ¼th
 *
 *  intervalxt is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  intervalxt is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with intervalxt. If not, see <https://www.gnu.org/licenses/>.
 *********************************************************************/

#include <gtest/gtest.h>
#include <boost/lexical_cast.hpp>
#include <vector>

#include <intervalxt/interval_exchange_transformation.hpp>
#include <intervalxt/label.hpp>
#include <intervalxt/length.hpp>
#include <intervalxt/maybe_saddle_connection.hpp>

using namespace intervalxt;

namespace intervalxt {
template <typename Length>
bool operator==(const IntervalExchangeTransformation<Length>& lhs, const IntervalExchangeTransformation<Length>& rhs) {
  return boost::lexical_cast<std::string>(lhs) == boost::lexical_cast<std::string>(rhs);
}
}  // namespace intervalxt

namespace {

// Example over rationals
TEST(BoshernitzanTest, Boshernitzan0) {
  using Length = Length<int>;

  IntervalExchangeTransformation<Length> iet({Length(451), Length(3321), Length(451)}, {2, 1, 0});
  EXPECT_FALSE(iet.boshernitzanNoPeriodicTrajectory());
}

// Example with no rational relation between lengths (field of degree 2)
TEST(BoshernitzanTest, Boshernitzan1) {
  using Length = Length<eantic::renf_elem_class>;

  auto K = eantic::renf_class::make("a^2 - 2", "a", "1.41 +/- 0.01");
  eantic::renf_elem_class a(K, "a");
  eantic::renf_elem_class b(K, 1);
  IntervalExchangeTransformation<Length> iet({Length(a), Length(b)}, {1, 0});
  EXPECT_TRUE(iet.boshernitzanNoPeriodicTrajectory());
}

// Example with no rational relation between lengths (field of degree 3)
TEST(BoshernitzanTest, Boshernitzan2) {
  using Length = Length<eantic::renf_elem_class>;

  auto K = eantic::renf_class::make("a^3 - 2", "a", "1.25 +/- 0.01");
  eantic::renf_elem_class a(K, "a^2");
  eantic::renf_elem_class b(K, "a");
  eantic::renf_elem_class c(K, 1);

  IntervalExchangeTransformation<Length> iet0({Length(a), Length(b)}, {1, 0});
  EXPECT_TRUE(iet0.boshernitzanNoPeriodicTrajectory());

  IntervalExchangeTransformation<Length> iet1({Length(a), Length(b), Length(c)}, {2, 1, 0});
  EXPECT_TRUE(iet1.boshernitzanNoPeriodicTrajectory());
}

// Example with a cylinder
TEST(BoshernitzanTest, Boshernitzan3) {
  using Length = Length<eantic::renf_elem_class>;

  // translations are
  //   t0 = 7*a + 7
  //   t1 = -3*a - 3
  //   t2 = -10*a - 10
  // so that the space of relations is generated by (3,7,0) and (10,0,7)
  auto K = eantic::renf_class::make("a^2 - 2", "a", "1.41 +/- 0.01");
  eantic::renf_elem_class a(K, "7*a + 8");
  eantic::renf_elem_class b(K, "3*a + 2");
  eantic::renf_elem_class c(K, "4*a + 5");
  IntervalExchangeTransformation<Length> iet({Length(a), Length(b), Length(c)}, {2, 1, 0});
  EXPECT_FALSE(iet.boshernitzanNoPeriodicTrajectory());
}

// Minimal example (over a quadratic field)
TEST(BoshernitzanTest, Boshernitzan4) {
  using Length = Length<eantic::renf_elem_class>;

  auto K = eantic::renf_class::make("a^2 - 2", "a", "1.41 +/- 0.01");
  eantic::renf_elem_class a(K, "a");
  eantic::renf_elem_class one(K, 1);

  IntervalExchangeTransformation<Length> iet({Length(a), Length(one), Length(one), Length(one)}, {3, 1, 0, 2});
  EXPECT_TRUE(iet.boshernitzanNoPeriodicTrajectory());
}

}  // namespace

#include "main.hpp"
